#######@@@@@@@@@@@@ Non-pre emptive scheduling algorithm 

########  first come first serve 

#include<stdio.h>
int main()
{
int AT[10],BT[10],WT[10],TT[10],i,n;
int b=0,cmpl_T;
float Avg_WT,Avg_TT,Total=0;
printf("Enter number of the process\n");
scanf("%d",&n);
printf("Enter Arrival time and Burst time of the process\n");
printf("AT\tBT\n");
for(i=0;i<n;i++)
{
scanf("%d%d",&AT[i],&BT[i]);
}
// Logic for calculating Waiting time
for(i=0;i<n;i++)
{
if(i==0)
WT[i]=AT[i];
else
WT[i]=b-AT[i];
b+=BT[i];
Total+=WT[i];
}
Avg_WT=Total/n;
// Logic for calculating Turn around time
cmpl_T=0;
Total=0;

for(i=0;i<n;i++)
{
cmpl_T+=BT[i];
TT[i]=cmpl_T-AT[i];
Total+=TT[i];
}
Avg_TT=Total/n;
// printing of outputs
printf("Process ,Waiting_time ,TurnA_time\n");
for(i=0;i<n;i++)
{
printf("%d\t\t%d\t\t%d\n",i+1,WT[i],TT[i]);
}
printf("Average waiting time is : %f\n",Avg_WT);
printf("Average turn around time is : %f\n",Avg_TT);
return 0;
}




###########Shortest job first


#include<stdio.h>
void main()
{
int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,ps,temp;
float avg_wt,avg_tat;
printf("Enter number of process:");
scanf("%d",&n);
printf("\nEnter Burst Time:\n");
for(i=0;i<n;i++)
{
printf("p%d:",i+1);
scanf("%d",&bt[i]);
p[i]=i+1; //contains process number
}
//sorting burst time in ascending order using selection sort
for(i=0;i<n;i++)
{
ps=i;
for(j=i+1;j<n;j++)
{
if(bt[j]<bt[ps])
ps=j;
}
temp=bt[i];
bt[i]=bt[ps];
bt[ps]=temp;

temp=p[i];
p[i]=p[ps];
p[ps]=temp;
}

wt[0]=0; //waiting time for first process will be zero
//calculate waiting time
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=(float)total/n; //average waiting time
total=0;
printf("\n Process \t Burst Time \t Waiting Time \t\t\t Turnaround Time");
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i]; //calculate turnaround time
total+=tat[i];
printf("\n p%d \t\t\t\t %d\t\t\t\t %d\t\t\t %d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=(float)total/n; //average turnaround time
printf("\n\nAverage Waiting Time=%f",avg_wt);
printf("\nAverage Turnaround Time=%f\n",avg_tat);
}



############
a. Create a child process using the fork system call.
b. Obtain the process ID of both child and parent by using getpid and getppid
system call



#include<stdio.h>
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>

int main()

{
    fork();
    
    printf("hello world\n");
    
    printf("\nThe parent process id : %d",getppid());
    printf("\nThe child  process id : %d ",getpid());
    
    
    
    return 0;
}

#############@@@@@@@@@

1. Write shell scripts to do the following:
a. Display OS version, release number, kernel version
b. Display top 10 processes in descending order
c. Display processes with highest memory usage.
d. Display current logged in user and log name.
e. Display current shell, home directory, operating system type, current Path setting,
current working directory.


a.
uname -a
uname -r
lsb_release -a
b.ps aux --sort=-%mem | head -n 11
c.ps aux --sort=-%MEM| head -11
d.whoami && logname
e.
operating system type - uname -s
current shell-echo $SHELL
current path setting-echo $PATH
current working directory - pwd 
home directory-$HOME


################@@@@@@@@@@@@@--implement the cp and mv 

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main()
{
FILE *fptr1, *fptr2;
char filename[100], c;
printf(&quot;Enter the filename to open for reading \n&quot;);
scanf(&quot;%s&quot;, filename);
fptr1 = fopen(filename,
&quot;r&quot;); if (fptr1 == NULL)
{
printf(&quot;Cannot open file %s \n&quot;, filename);
exit(0);
}
printf(&quot;Enter the filename to open for writing \n&quot;);
scanf(&quot;%s&quot;, filename);
fptr2 = fopen(filename, &quot;w&quot;);
if (fptr2 == NULL)
{
printf(&quot;Cannot open file %s \n&quot;, filename);
exit(0);
}
c = fgetc(fptr1);
while (c != EOF)
{
fputc(c, fptr2);
c =
fgetc(fptr1);
}
printf(&quot;\nContents copied to %s&quot;, filename);
fclose(fptr1);
fclose(fptr2);
return 0;
}



implement the mv 

#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
int main() {
char old[100], new[100];
printf(&quot;Enter old file path:
&quot;); if (scanf(&quot;%99s&quot;, old) !=
1) {
fprintf(stderr, &quot;Error reading old file path.\n&quot;);
exit(EXIT_FAILURE);
}
printf(&quot;Enter new file path:
&quot;); if (scanf(&quot;%99s&quot;, new) !=
1) {
fprintf(stderr, &quot;Error reading new file path.\n&quot;);
exit(EXIT_FAILURE);
}
if (rename(old, new) == 0) {
printf(&quot;File renamed successfully.\n&quot;);
} else {
perror(&quot;Unable to rename files&quot;);
exit(EXIT_FAILURE);
}
return 0;
}


##############@@@@@@@@@ -FCFS Disk scheduling algorithm



